{"version":3,"file":"static/js/591.84a78ed7.chunk.js","mappings":"6MAaMA,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,wBAAiB,IAwEzC,EAlEK,SAAH,GAAsE,IAAhEC,EAAe,EAAfA,gBAAiBC,EAAkB,EAAlBA,mBAAoBC,EAAmB,EAAnBA,oBAC3C,GACEC,EAAAA,EAAAA,YAAWC,EAAAA,GADLC,EAAQ,EAARA,SAAUC,EAAiB,EAAjBA,kBAAmBC,EAAc,EAAdA,eAAgBC,EAAW,EAAXA,YAE/CC,GAAWC,EAAAA,EAAAA,UAEXC,GAAqBC,EAAAA,EAAAA,cACzB,SAACC,GACKJ,EAASK,SAASL,EAASK,QAAQC,aACvCN,EAASK,QAAU,IAAIE,sBAAqB,SAACC,GACvCA,EAAQ,GAAGC,gBACbZ,GAAkB,SAACa,GAAS,OAAKA,EAAY,CAAC,GAElD,IAEIN,GAAMJ,EAASK,QAAQM,QAAQP,EACrC,GACA,CAACN,IASH,OANAc,EAAAA,EAAAA,YAAU,WACRC,YAAW,WACTrB,EAAmBI,EACrB,GAAG,IACL,GAAG,CAACA,KAGF,gBAAKkB,UAAU,gBAAe,UAC1Bf,GAAeR,EAAgBwB,OAAS,EACxCxB,EAAgByB,KAAI,SAACC,EAAMC,GACzB,OAAI3B,EAAgBwB,SAAWG,EAAQ,GAEnC,SAAC,EAAAC,SAAQ,CAAaC,UAAU,gDAA6B,UAC3D,iBAAKC,IAAKnB,EAAmB,UAC1B,KACD,SAACb,EAAI,CACHiC,aAAc7B,EACd8B,KAAMN,EAAKM,KACXC,IAAKP,EAAKO,IACVN,MAAOA,IACN,QARQA,IAcf,SAAC,EAAAC,SAAQ,CAAaC,UAAU,gDAA6B,UAC3D,SAAC/B,EAAI,CACHiC,aAAc7B,EACd8B,KAAMN,EAAKM,KACXC,IAAKP,EAAKO,IACVN,MAAOA,KALIA,EAUrB,KAEA,2BAC8B,IAA3B3B,EAAgBwB,SAAgB,8CACjC,gBAAKD,UAAU,kBAAkBW,IAAKC,QAKhD,C","sources":["components/pokemonList/index.tsx"],"sourcesContent":["import {\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  Suspense,\n  lazy,\n} from 'react';\nimport { DataProviderContext } from '../../contexts/dataProvider';\nimport { IDetail, IPokemon } from '../../types/pokemon';\nimport pokeballImg from '../../assets/pokeball.png';\nimport './index.css';\nconst Item = lazy(() => import('../item'));\n\nconst PokemonList: FC<{\n  currentPokemons: IPokemon[];\n  setCurrentPokemons: React.Dispatch<React.SetStateAction<IPokemon[]>>;\n  handlerSelectedItem: (item: IDetail) => void;\n}> = ({ currentPokemons, setCurrentPokemons, handlerSelectedItem }) => {\n  const { pokemons, setCountNextFetch, countNextFetch, isSearching } =\n    useContext(DataProviderContext);\n  const observer = useRef<any>();\n\n  const lastPokemonItemRef = useCallback(\n    (node: any) => {\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting) {\n          setCountNextFetch((prevState) => prevState + 1);\n        }\n      });\n\n      if (node) observer.current.observe(node);\n    },\n    [countNextFetch]\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      setCurrentPokemons(pokemons);\n    }, 2000);\n  }, [pokemons]);\n\n  return (\n    <div className=\"listContainer\">\n      {!isSearching && currentPokemons.length > 0 ? (\n        currentPokemons.map((item, index) => {\n          if (currentPokemons.length === index + 1) {\n            return (\n              <Suspense key={index} fallback={<h1>LOADDING POKEMON...</h1>}>\n                <div ref={lastPokemonItemRef}>\n                  {' '}\n                  <Item\n                    handlerClick={handlerSelectedItem}\n                    name={item.name}\n                    url={item.url}\n                    index={index}\n                  />{' '}\n                </div>\n              </Suspense>\n            );\n          } else {\n            return (\n              <Suspense key={index} fallback={<h1>LOADDING POKEMON...</h1>}>\n                <Item\n                  handlerClick={handlerSelectedItem}\n                  name={item.name}\n                  url={item.url}\n                  index={index}\n                />\n              </Suspense>\n            );\n          }\n        })\n      ) : (\n        <div>\n          {currentPokemons.length === 0 && <h1>No pokemon found</h1>}\n          <img className=\"pokeballLoading\" src={pokeballImg} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PokemonList;\n"],"names":["Item","lazy","currentPokemons","setCurrentPokemons","handlerSelectedItem","useContext","DataProviderContext","pokemons","setCountNextFetch","countNextFetch","isSearching","observer","useRef","lastPokemonItemRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevState","observe","useEffect","setTimeout","className","length","map","item","index","Suspense","fallback","ref","handlerClick","name","url","src","pokeballImg"],"sourceRoot":""}